### APPLICATION CREDENTIALS ###
spring.application.name=customer

### SERVER CREDENTIALS ###
server.port=${CUSTOMER_SERVER_PORT:8012}

### DATABASE CREDENTIALS ###
spring.datasource.url=${CUSTOMER_DB_URL:jdbc:postgresql://localhost:5432/customer}
spring.datasource.username=${CUSTOMER_DB_USER:customer}
spring.datasource.password=${CUSTOMER_DB_PASSWORD:postgres}
spring.sql.init.mode=always

### JPA CREDENTIALS ###
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

#spring.jpa.hibernate.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

### KAFKA CREDENTIALS ###
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

### CAMUNDA CREDENTIALS ###
camunda.server.engine=${CAMUNDA_ENGINE_REST:http://localhost:8080/engine-rest/}
camunda.server.definition.key=${CAMUNDA_DEFINITION_KEY:foodOrder}
### gRPC CREDENTIALS ###

grpc.server.port=${CUSTOMER_GRPC_SERVER_PORT:9012}

#grpc.client.grpc-service.address=${AUTH_GRPC_URL:static://localhost:50051}
grpc.client.grpc-service.address=${AUTH_GRPC_URL:static://localhost:9000}
grpc.client.grpc-service.negotiation-type=plaintext
grpc.client.grpc-restaurant-service.address=${RESTAURANT_GRPC_URL:static://localhost:9791}
grpc.client.grpc-restaurant-service.negotiation-type=plaintext
### PROMETHEUS CREDENTIALS ###
management.endpoints.web.exposure.include=*

